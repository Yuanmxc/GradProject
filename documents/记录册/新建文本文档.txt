记录册1--eBPF相关资料.docx

1. 上周计划完成情况
上周主要学习了eBPF技术，收集了大量相关资料。我仔细看了eBPF的核心概念、工作原理以及在Linux内核里的应用。通过这些学习，我搞明白了eBPF虚拟机、指令集、安全机制和eBPF程序的生命周期。还了解了eBPF在可观测性、网络和安全方面的实际用法。这些为设计eBPF程序打下了理论基础。虽然技术细节挺复杂的，但通过不断查资料和消化，对eBPF的整体框架和特点有了清晰认识，为下一步的开发做好了知识准备。

2. 本周计划
本周重点研究动态链接器。我打算系统地学习动态链接的整个过程，包括程序编译、链接、加载和运行时的符号解析与重定位机制。这会涉及ELF文件格式、PLT/GOT表的作用，以及dlopen、dlsym、dlclose这些API的内部工作。我会查阅Linux系统编程的书籍和网上资料，特别是关注动态链接器在程序加载和运行中可能遇到的各种情况。搞懂动态链接的复杂性是写好eBPF监控程序的关键，因为它直接影响我如何精确地捕捉动态链接事件。

记录册2--动态链接器相关资料.docx

1. 上周计划完成情况
上周顺利学完了动态链接器。我详细了解了动态链接器在程序启动和运行时的作用，特别是共享库的加载、符号查找和地址重定位原理。通过看文档和代码，我搞懂了动态链接库（.so文件）的结构，以及可执行文件怎么通过ld.so找到并加载依赖的共享库。我还深入理解了PLT和GOT在延迟绑定和函数调用中的作用。这些知识对后面设计eBPF探针，捕捉底层行为很有用。

2. 本周计划
本周主要学习libbpf库。libbpf能简化eBPF程序开发和加载，理解它的API和使用方法对高效开发用户空间程序很重要。我计划看libbpf的文档和示例代码，学习怎么加载eBPF字节码、管理eBPF映射（maps），以及怎么从perf缓冲区读取事件数据。此外，我还会关注libbpf的程序版本化和CO-RE特性，让eBPF程序能更好地适应不同内核版本。这将是连接内核态eBPF程序和用户态可视化界面的关键。

记录册3--libbpf库相关资料.docx

1. 上周计划完成情况
上周我深入学习了libbpf库。通过看官方文档和分析libbpf示例项目，我搞懂了怎么用libbpf加载、附加和管理eBPF程序。特别是在perf buffer的使用上，我明白了怎么设置回调函数来处理内核空间传过来的事件数据，以及怎么处理事件丢失。我还初步了解了libbpf的错误处理和eBPF程序生命周期管理。这些知识对连接eBPF程序和用户空间应用至关重要。

2. 本周计划
本周我将开始项目的开发准备和计划。这包括明确项目的具体目标，确定最终使用的技术（eBPF、libbpf、Qt5、C++），并细化开发步骤。我会根据之前对eBPF和动态链接器的学习，构思eBPF程序的核心逻辑，比如要监控哪些动态链接事件（dlopen, dlsym, dlclose），怎么获取事件的详细信息（库路径、符号名、进程ID等）。同时，我还会初步规划Qt5前端的界面布局和功能模块，考虑怎么有效展示捕获到的动态链接事件。另外，还会制定一个初步的开发时间表，确保项目按部就班进行。

记录册4--开发准备和计划.docx

1. 上周计划完成情况
上周完成了详细的开发准备和计划。我明确了项目目标：用eBPF监控Linux动态链接器的加载、卸载和符号解析过程，再通过Qt5界面显示。技术选型确定为eBPF程序（C）、libbpf用户空间加载程序（C++）和Qt5图形界面（C++）。eBPF程序设计上，我考虑用Uprobes在dlopen、dlsym和dlclose等函数上加探针，并设计了event结构体用于内核态与用户态数据传输。Qt5前端方面，初步设想用表格显示不同事件，并考虑实时更新。整个计划让项目方向更明确，指导了后续编码。

2. 本周计划
本周主要任务是搭建开发环境。这是启动阶段的关键一步，我得确保所有需要的工具和库都安装配置正确。具体来说：

eBPF开发环境： 确保Linux内核支持eBPF，安装clang、llvm、libbpf等工具链。
Qt5开发环境： 安装Qt5开发套件，包括Qt Creator IDE和Qt5库。
依赖库： 确认dlfcn.h等标准头文件可用，所有系统库都准备好了。
CMake配置： 写初步的CMakeLists.txt，管理项目编译，确保能正确编译eBPF程序、用户空间程序和Qt5前端。 环境搭建顺利，后续写代码才有效率。
记录册5--相关环境搭建.docx

1. 上周计划完成情况
上周我成功搭建了项目所需的开发环境。我在Linux系统上配置了eBPF开发环境，安装了clang、llvm、libbpf及其依赖，并验证了内核对eBPF的支持。同时，我也顺利安装了Qt5开发套件，包括Qt Creator和必要的Qt库。为了统一编译，我创建了项目的CMakeLists.txt文件，并初步配置了对eBPF程序、用户空间C++程序和Qt5前端的编译支持。所有工具链和库都能正常工作，为后续编码奠定了基础。

2. 本周计划
本周将进入项目的第一个编码阶段，主要写eBPF程序。我计划根据之前设计的event结构体和探针点，编写src/dynlib_monitor.bpf.c文件。具体内容包括：

定义eBPF映射（maps）： 实现用于内核态和用户态之间数据传递及存储中间状态的BPF maps，比如events perf buffer和handle_to_path哈希映射。
编写Uprobe探针： 实现dlopen、dlsym、dlclose等关键动态链接函数的uprobe和uretprobe探针。
数据捕获： 在探针里捕获进程ID、进程名、库路径、函数句柄、符号名等信息，填到event结构体里。
事件发送： 用bpf_perf_event_output把填好的事件结构体发到用户空间。 这一阶段的目标是让eBPF程序能初步捕获动态链接事件，给用户空间程序提供数据。
记录册6--第一次代码记录.docx

1. 上周计划完成情况
上周初步完成了eBPF程序编码。在src/dynlib_monitor.bpf.c中，我定义了event结构体，创建了BPF映射，包括存句柄到路径的handle_to_path和发事件到用户空间的events perf buffer。关键是实现了针对dlopen、dlsym和dlclose这三个动态链接函数的uprobe和uretprobe探针。探针里我捕获了进程信息（PID、COMM）、库路径、函数句柄、符号名等数据，并填入了event结构体。初步测试显示，eBPF程序能编译并通过libbpf加载，为用户空间程序的数据处理打好了基础。

2. 本周计划
本周我将开始写用户空间程序，也就是src/dynlib_monitor.cpp。这个程序负责加载eBPF字节码、管理BPF映射以及从perf buffer接收并处理eBPF事件。具体来说：

用libbpf加载eBPF程序： 调用libbpf API加载并附加之前写的eBPF程序。
设置perf buffer回调： 实现handle_event回调函数，接收内核态发来的事件数据。
事件数据解析与格式化： 在handle_event里解析event结构体，根据事件类型（加载、卸载、符号解析）格式化成可读的字符串。这会涉及时间戳转换和dlopen标志解析。
命令行参数处理： 实现命令行参数解析，把目标进程名传给eBPF程序里的BPF map。
进程监控与错误处理： 确保用户空间程序能正确启动eBPF监控，并处理可能出现的错误，比如eBPF程序加载失败或perf buffer错误。
记录册7--第二次代码记录.docx

1. 上周计划完成情况
上周初步完成了用户空间程序src/dynlib_monitor.cpp。我成功集成了libbpf库，实现了eBPF程序的加载和附加。关键是写好了handle_event回调函数，它能接收内核态通过perf buffer发来的event结构体数据。我实现了不同事件类型（加载、卸载、符号解析）的解析和格式化输出，包括时间戳转换、dlopen标志解析和库路径获取。此外，还加了命令行参数处理，让用户能指定监控目标进程。初步测试显示，用户空间程序能接收并打印eBPF程序捕获的事件信息，打通了内核态到用户态的数据传输通道。

2. 本周计划
本周主要设计和实现Qt5可视化程序的前端界面。我打算在src/mainwindow.cpp、src/mainwindow.h、src/eventdata.cpp、src/eventdata.h、src/timelineview.cpp和src/timelineview.h等文件里开发。具体内容包括：

设计主窗口布局： 用Qt的布局管理器（比如QVBoxLayout和QHBoxLayout）组织UI组件。
实现事件表格： 创建QTabWidget来分类显示动态库加载、卸载和符号解析事件，每个标签页用QTableWidget展示详细信息。
集成EventData类： 实现EventData类，存储和管理用户空间程序发来的事件数据。
实时更新表格： 设计机制，让新事件能动态添加到表格中，保证信息实时。
与ProcessManager初步集成： 开始考虑怎么让用户空间程序（后端）和Qt前端通信，初步设计ProcessManager类来管理后端进程的启动、停止和输出。 这一阶段的目标是做出一个功能完整、响应快的可视化界面，能直观显示动态链接事件。
记录册8--第三次代码记录.docx

1. 上周计划完成情况
上周我完成了Qt5可视化程序的核心界面开发。在mainwindow.cpp中，我成功设计了主窗口布局，并创建了QTabWidget来分类展示不同类型的动态链接事件。加载、卸载、符号解析每种事件都有独立的QTableWidget，详细列出时间戳、进程信息和具体细节。我初步实现了EventData类来管理事件存储和分发，并设计了timelineview组件来显示所有事件的综合时间线。虽然与后端程序集成还没完全完成，但前端界面已经能接收并结构化显示模拟事件数据，实现了事件分类显示和初步可视化效果。

2. 本周计划
本周是项目整体集成和功能完善的关键阶段。我计划：

完成ProcessManager： 完善src/processmanager.cpp和src/processmanager.h，实现与后端dynlib_monitor进程的通信。这包括启动、停止后端进程，捕获其标准输出，并解析成独立的事件文本块。
Qt前端与后端集成： 连接ProcessManager与MainWindow，让后端捕获的事件能实时传给EventData，进而更新Qt前端的表格视图。
事件文本解析： 在ProcessManager中实现一个可靠的机制，能从后端输出的字符串流中准确识别和提取完整的事件文本。
错误和状态反馈： 在前端界面里加状态标签和消息框，显示监控状态（比如“正在监控”、“已停止”）和错误信息。
初步联调测试： 进行一次完整的系统联调测试，确保eBPF程序、用户空间程序和Qt前端能一起工作，并正确捕获和显示动态链接事件。
记录册9--第四次代码记录.docx

1. 上周计划完成情况
上周我完成了项目整体的集成和功能完善。主要工作是实现了ProcessManager类，它现在能成功启动和停止后端dynlib_monitor进程，并实时捕获其标准输出。我设计并实现了输出解析逻辑，将后端输出的原始文本流准确分割成独立的事件块，再传给EventData处理。通过ProcessManager发出的信号，MainWindow能实时接收新事件并更新加载、卸载、符号解析等表格视图，以及时间线视图。此外，我还加了状态标签和错误消息提示，增强了用户界面的反馈。经过全面的联调测试，eBPF程序、用户空间程序和Qt前端已能协同工作，实现了对动态链接事件的有效监控和可视化。

2. 本周计划
本周我将开始写毕业论文的第一部分。根据论文目录，我计划完成：

第1章 绪论： 介绍概述，说明动态链接的重要性、eBPF技术在系统监控的优势，以及本项目要解决的问题和研究意义。同时，概括国内外相关研究现状，简要说明论文内容安排。
第2章 相关技术： 详细介绍eBPF技术，包括概述、工作原理（内核态和用户态交互）、以及libbpf库的作用。同时，深入阐述动态链接器的基本概念、工作机制（包括动态库、符号解析与重定位），以及Qt5作为图形界面开发框架的概述和数据可视化优势。 这一阶段主要整理理论知识和引用文献，确保论文的学术性和完整性。
记录册10--论文撰写1.docx

1. 上周计划完成情况
上周顺利完成了毕业论文的第一部分撰写。我详细写了第1章 绪论，包括研究背景、动态链接重要性、eBPF技术优势的概述，以及相关研究综述和论文结构安排。同时，我深入阐述了第2章 相关技术。这一章里，我详细介绍了eBPF技术的概述、在内核中的工作原理（包括程序加载、校验、JIT编译等），并阐述了libbpf库作为用户空间开发辅助工具的作用。此外，我还系统回顾了动态链接器的核心概念，比如共享库机制、符号解析流程、PLT/GOT表等，并对Qt5作为可视化开发框架做了简要介绍。这一阶段的工作为整个论文打下了理论基础。

2. 本周计划
本周我将继续写毕业论文，主要集中在第3章 系统分析与设计和第4章 系统架构设计。具体计划如下：

第3章 系统分析与设计： 先做详细的系统需求分析，明确监控系统要实现的功能（如事件捕获、数据解析、实时显示、分类过滤等）。然后，阐述系统整体设计原则，包括模块化、可扩展性、性能优化等。最后，重点描述信息处理设计，即怎么把从内核捕获的原始事件数据处理、转换和存储，方便前端显示。
第4章 系统架构设计： 详细描绘系统整体架构分层，包括eBPF内核态层、libbpf用户态数据处理层和Qt5可视化应用层，并说明各层职责和交互。同时，深入设计内核态-用户态交互机制，包括BPF maps（特别是perf buffer）的使用细节。最后，详细设计BPF程序、用户空间程序和Qt5可视化程序的内部组件，明确每个模块的功能和接口。
记录册11--论文撰写2.docx

1. 上周计划完成情况
上周完成了毕业论文的第二部分，包括第3章 系统分析与设计和第4章 系统架构设计。在“系统分析与设计”部分，我详细说明了本系统的功能需求，明确了要监控的动态链接事件类型、捕获的信息字段以及可视化界面的交互需求。我还介绍了系统设计原则，并详细设计了信息处理流程，从原始事件捕获到数据格式化和存储。在“系统架构设计”部分，我清晰地描绘了系统的三层架构：eBPF内核态、libbpf用户态数据处理层和Qt5可视化应用层，并说明了各层间的交互机制，特别是eBPF maps和perf buffer在数据传输中的作用。对BPF程序、用户空间程序和Qt5可视化程序的组件设计也进行了详细描述。

2. 本周计划
本周我将继续写毕业论文，目标是完成第5章 系统功能实现和第6章 系统测试。具体计划如下：

第5章 系统功能实现： 详细描述BPF程序的实现细节，包括探针点选择、event结构体定义、BPF maps使用（如handle_to_path和events perf buffer）。接着，阐述用户空间程序（dynlib_monitor.cpp）如何用libbpf加载eBPF程序、处理perf buffer事件回调以及格式化输出。最后，详细介绍Qt5可视化程序（mainwindow.cpp、eventdata.cpp、timelineview.cpp等）的实现，包括UI布局、事件表格动态更新、事件数据管理和分类显示。这一章会结合代码片段和流程图，清晰展示各个模块的实现过程。
第6章 系统测试： 描述测试环境搭建，包括硬件、操作系统和软件依赖。然后，详细阐述功能测试的方法和结果，用具体的测试用例（如加载、卸载、符号解析事件的捕获和显示）验证系统正确性、实时性和稳定性。可以提供一些测试截图和数据，直观展示系统运行效果。
记录册12--论文撰写3.docx

1. 上周计划完成情况
上周我完成了毕业论文的核心章节撰写，包括第5章 系统功能实现和第6章 系统测试。在“系统功能实现”部分，我详细描述了eBPF程序的实现，包括如何选择探针点、定义event结构体、以及利用BPF maps（如handle_to_path和events perf buffer）进行数据传递。接着，我阐述了用户空间程序dynlib_monitor.cpp如何通过libbpf库加载eBPF程序，并处理perf buffer事件回调以及格式化输出。最后，我详细介绍了Qt5可视化程序中mainwindow.cpp、eventdata.cpp、timelineview.cpp等模块的实现，涵盖了UI布局、事件表格动态更新、事件数据管理和分类显示。在“系统测试”部分，我描述了测试环境搭建，并详细阐述了功能测试的方法和结果，通过具体测试用例验证了系统的正确性、实时性和稳定性，并提供了测试截图和数据。

2. 本周计划
本周我将进入毕业论文的收尾阶段，并开始为毕业答辩做准备。具体计划如下：

完成论文剩余部分： 撰写“结论”、“参考文献”和“致谢”部分。在“结论”中，总结项目的主要成果，并展望未来扩展方向。整理并规范化所有参考文献，完成致谢。
论文初稿全面审阅： 对论文进行首次全面审阅，检查整体结构、语言表达、逻辑连贯性以及格式规范性，修正初稿中可能存在的明显错误，确保论文的完整性和可读性。
向导师提交初稿： 及时将完成的论文初稿提交给导师审阅，以便获取早期反馈。
记录册13--论文撰写4.docx

1. 上周计划完成情况
上周我完成了毕业论文初稿的撰写，并及时提交给了导师。根据导师的宝贵建议，我对论文进行了全面的修改和完善。主要修改点包括：重构了部分章节的逻辑结构，使论述更加流畅和严谨；补充了更详尽的实验数据和分析，提升了论文的科学性和说服力；调整了部分图表和公式的呈现方式，使其更加清晰易懂；同时，对论文的语言表达进行了精细润色，确保学术严谨性和专业性。这些修改显著提升了论文的整体质量和可读性。

2. 本周计划
本周的核心任务是根据导师的最新反馈，对毕业论文进行最后的细节调整和完善，并据此彻底重新制作毕业答辩PPT。具体计划如下：

论文最终定稿： 结合导师的最新修改意见，对论文进行最后的细节调整和润色，确保文字准确无误、逻辑严密、格式完全符合学校的毕业论文规范。这将是论文提交前的最终版本。
重新制作毕业答辩PPT： 根据修改后的论文内容和结构，彻底重新设计和制作毕业答辩演示文稿（PPT）。PPT将围绕最新的论文核心内容，包括优化的研究背景、更清晰的系统架构、eBPF和动态链接的核心技术细节、详细的实现过程、精确的实验数据和深入的性能分析、以及最后的结论和未来展望。我将注重PPT的视觉效果和逻辑清晰度，力求在有限的答辩时间内充分展现项目的亮点和创新性。
准备答辩讲稿和预设问题： 撰写详细的答辩讲稿，提炼每个幻灯片的关键信息和讲解要点，确保答辩时能够流畅、准确地表达。同时，根据修改后的论文内容，预设答辩委员会可能提出的问题，并准备详尽的回答。
记录册14--ppt制作.docx

1. 上周计划完成情况
上周我根据导师的最新建议，完成了毕业论文的最终定稿，确保了论文的质量和规范性。同时，我彻底重新制作了毕业答辩PPT。新的PPT内容与最终版论文保持一致，包含了更详尽的研究背景、优化的系统架构图、eBPF和动态链接核心技术的深入剖析、具体的代码实现截图、以及补充和完善后的实验数据和性能分析结果。PPT的视觉设计也经过了精心优化，提升了专业性和清晰度。

2. 本周计划
本周的核心任务是完成毕业答辩PPT的最终完善，并进行多次模拟演练，确保答辩顺利进行。具体计划如下：

PPT内容与视觉效果最终检查： 对PPT进行最后一次全面检查，确保所有信息准确无误，图表清晰，动画和过渡效果流畅。同时，对讲稿进行润色，使表达更精准、有力，控制好时间分配。
多次模拟答辩： 进行至少3-5次严格的模拟答辩，每次都设定严格的时间限制，模拟真实的答辩流程。通过演练，熟悉讲解节奏，优化表达方式，并找出可能存在的不足，例如逻辑跳跃、时间分配不均等。
问答环节深度准备： 针对论文中可能被提问的关键点、创新点、技术难点以及未来展望，预设更多可能的问题，并准备简洁、有力的回答。这将帮助我在答辩时更自信、从容。
设备和环境测试： 在答辩前，提前测试答辩现场所需的电脑、投影仪、麦克风等所有设备，确保它们正常工作，避免因技术问题影响答辩表现。